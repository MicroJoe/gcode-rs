var N = null;var searchIndex = {};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"write","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["gcode"]={"doc":"A gcode parsing library designed for `no_std` environments.","items":[[3,"Parser","gcode","A gcode parser which is extremely permissive in what input it will accept.",N,N],[3,"Gcode","","A single command in the `gcode` programming language.",N,N],[3,"Word","","A single `Word` in the `gcode` language (e.g. `X-12.3`).",N,N],[12,"letter","","The letter associated with this word (e.g. the `X` in `X12.3`).",0,N],[12,"value","","The numeric part of the word.",0,N],[12,"span","","The word's location in its original text.",0,N],[3,"Span","","A set of byte indices which correspond to the location of a substring in a larger piece of text.",N,N],[12,"start","","The starting index.",1,N],[12,"end","","The index one past the end of the selected text.",1,N],[12,"source_line","","Which line (zero indexed) does the text start on?",1,N],[4,"Mnemonic","","A general command category.",N,N],[13,"ProgramNumber","","A program number (`O555`).",2,N],[13,"ToolChange","","A tool change command (`T6`).",2,N],[13,"MachineRoutine","","A machine-specific routine (`M3`).",2,N],[13,"General","","A general command (`G01`).",2,N],[5,"parse","","Parse a string of text into a stream of `Gcode`s.",N,[[["str"]],["parser"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["parser"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["gcode"]]],[11,"clone","","",4,[[["self"]],["gcode"]]],[11,"eq","","",4,[[["self"],["gcode"]],["bool"]]],[11,"ne","","",4,[[["self"],["gcode"]],["bool"]]],[11,"new","","Create a new `Gcode`.",4,[[["mnemonic"],["f32"],["span"]],["gcode"]]],[11,"mnemonic","","Get the `Mnemonic` used by this `Gcode`.",4,[[["self"]],["mnemonic"]]],[11,"span","","Get the location of this `Gcode` in the original text.",4,[[["self"]],["span"]]],[11,"args","","The arguments provided to the `Gcode`.",4,N],[11,"line_number","","Get the line number given to this gode (e.g. the `20` in `N20 G04 P100`).",4,[[["self"]],["option",["u32"]]]],[11,"number","","The number associated with this `Gcode` (e.g. the `01` in `G01 X123`).",4,[[["self"]],["f32"]]],[11,"major_number","","The integral part of the `Gcode`'s number field.",4,[[["self"]],["u32"]]],[11,"minor_number","","Any number after the decimal point.",4,[[["self"]],["option",["u32"]]]],[11,"add_argument","","Add an argument to this `Gcode`'s argument list.",4,[[["self"],["word"]]]],[11,"with_argument","","A builder method for adding an argument to the `Gcode`.",4,[[["self"],["word"]],["self"]]],[11,"with_line_number","","A builder method for attaching a line number (the `30` in `N30 G01 X32`) to a command.",4,[[["self"],["u32"],["span"]],["self"]]],[11,"value_for","","Find the value for the desired argument.",4,[[["self"],["char"]],["option",["f32"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["word"]]],[11,"clone","","",0,[[["self"]],["word"]]],[11,"eq","","",0,[[["self"],["word"]],["bool"]]],[11,"ne","","",0,[[["self"],["word"]],["bool"]]],[11,"new","","Create a new `Word`.",0,[[["char"],["f32"],["span"]],["word"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["mnemonic"]]],[11,"eq","","",2,[[["self"],["mnemonic"]],["bool"]]],[11,"hash","","",2,N],[11,"default","","",2,[[],["mnemonic"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["span"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"hash","","",1,N],[11,"new","","Create a new `Span`.",1,[[["usize"],["usize"],["usize"]],["span"]]],[11,"merge","","Get the union of two spans.",1,[[["self"],["span"]],["span"]]],[11,"len","","The number of bytes within this span.",1,[[["self"]],["usize"]]],[11,"selected_text","","Given the original text, retrieve the substring this `Span` corresponds to.",1,[[["self"],["str"]],["option",["str"]]]],[0,"ffi","","A FFI interface to the `gcode` library.",N,N],[5,"parser_new","gcode::ffi","Create a new parser.",N,N],[5,"parser_next","","Get the next `Gcode`, returning `false` when there are no more `Gcode`s in the input.",N,N],[5,"gcode_mnemonic","","The overall category this `Gcode` belongs to.",N,N],[5,"gcode_number","","",N,N],[5,"gcode_major_number","","",N,N],[5,"gcode_num_args","","The number of arguments in this `Gcode`.",N,N],[5,"gcode_args","","Get a pointer to this `Gcode`'s arguments.",N,N],[5,"gcode_arg_value","","Get the value for the argument with a particular letter.",N,N],[5,"gcode_span","","The `Gcode`'s location in its source code.",N,N],[5,"gcode_line_number","","Get a `Gcode`'s line number (the `N20` argument), if it was assigned.",N,N],[5,"parser_destroy","","Destroy a `Parser` once it is no longer needed.",N,N],[17,"SIZE_OF_PARSER","","",N,N],[17,"SIZE_OF_GCODE","","",N,N],[17,"MAX_ARGS","gcode","The maximum number of arguments a `Gcode` can have.",N,N]],"paths":[[3,"Word"],[3,"Span"],[4,"Mnemonic"],[3,"Parser"],[3,"Gcode"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
initSearch(searchIndex);
