var N = null;var searchIndex = {};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["gcode"]={"doc":"","items":[[5,"parse","gcode","",N,[[["str"]],[""]]],[0,"parser","","",N,N],[3,"Parser","gcode::parser","An error-resistent streaming gcode parser.",N,N],[3,"Nop","","A no-op set of callbacks.",N,N],[8,"Callbacks","","",N,N],[11,"unexpected_token","","",0,N],[11,"unexpected_eof","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["parser"]]],[11,"new","","",1,[[["str"]],["parser",["nop"]]]],[11,"new_with_callbacks","","",1,[[["str"],["c"]],["parser"]]],[11,"callbacks","","Access the inner `Callbacks` object.",1,[[["self"]],["c"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["nop"]]],[11,"eq","","",2,[[["self"],["nop"]],["bool"]]],[0,"types","gcode","",N,N],[3,"Span","gcode::types","",N,N],[12,"start","","",3,N],[12,"end","","",3,N],[12,"source_line","","",3,N],[3,"Block","","A block containing `Gcode` commands and/or comments.",N,N],[3,"Gcode","","A single gcode command.",N,N],[3,"Argument","","A command argument.",N,N],[12,"letter","","",4,N],[12,"value","","",4,N],[12,"span","","",4,N],[3,"Comment","","A comment.",N,N],[12,"body","","",5,N],[12,"span","","",5,N],[4,"Mnemonic","","The general category a `Gcode` belongs to.",N,N],[13,"General","","",6,N],[13,"Miscellaneous","","",6,N],[13,"ProgramNumber","","",6,N],[13,"ToolChange","","",6,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"eq","","",3,[[["self"],["span"]],["bool"]]],[11,"ne","","",3,[[["self"],["span"]],["bool"]]],[11,"new","","",3,[[["usize"],["usize"],["usize"]],["span"]]],[11,"placeholder","","",3,[[],["span"]]],[11,"is_placeholder","","",3,[[["self"]],["bool"]]],[11,"text_from_source","","",3,[[["self"],["str"]],["option",["str"]]]],[11,"merge","","",3,[[["self"],["span"]],["span"]]],[11,"default","","",3,[[],["span"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["block"]]],[11,"eq","","",7,[[["self"],["block"]],["bool"]]],[11,"ne","","",7,[[["self"],["block"]],["bool"]]],[11,"is_empty","","",7,[[["self"]],["bool"]]],[11,"into_commands","","",7,[[["self"]],[""]]],[11,"commands","","",7,N],[11,"commands_mut","","",7,N],[11,"comments","","",7,N],[11,"src","","The original source text of the `Block`, if available.",7,[[["self"]],["option",["str"]]]],[11,"with_src","","",7,[[["self"],["str"]],["self"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"line_number","","",7,[[["self"]],["option",["usize"]]]],[11,"with_line_number","","",7,[[["self"],["usize"],["span"]],["self"]]],[11,"deleted","","",7,[[["self"]],["bool"]]],[11,"delete","","",7,[[["self"],["bool"]]]],[11,"push_comment","","",7,[[["self"],["comment"]]]],[11,"push_command","","",7,[[["self"],["gcode"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["gcode"]]],[11,"eq","","",8,[[["self"],["gcode"]],["bool"]]],[11,"ne","","",8,[[["self"],["gcode"]],["bool"]]],[11,"new","","",8,[[["mnemonic"],["f32"]],["gcode"]]],[11,"mnemonic","","",8,[[["self"]],["mnemonic"]]],[11,"major_number","","",8,[[["self"]],["usize"]]],[11,"minor_number","","",8,[[["self"]],["option",["usize"]]]],[11,"args","","",8,N],[11,"args_mut","","",8,N],[11,"with_line_number","","",8,[[["self"],["usize"]],["self"]]],[11,"with_minor_nujmber","","",8,[[["self"],["usize"]],["self"]]],[11,"with_argument","","",8,[[["self"],["argument"]],["self"]]],[11,"with_span","","",8,[[["self"],["span"]],["self"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"value_for","","",8,[[["self"],["char"]],["option",["f32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["argument"]]],[11,"eq","","",4,[[["self"],["argument"]],["bool"]]],[11,"ne","","",4,[[["self"],["argument"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["comment"]]],[11,"eq","","",5,[[["self"],["comment"]],["bool"]]],[11,"ne","","",5,[[["self"],["comment"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["mnemonic"]]],[11,"eq","","",6,[[["self"],["mnemonic"]],["bool"]]],[11,"hash","","",6,N]],"paths":[[8,"Callbacks"],[3,"Parser"],[3,"Nop"],[3,"Span"],[3,"Argument"],[3,"Comment"],[4,"Mnemonic"],[3,"Block"],[3,"Gcode"]]};
searchIndex["libm"]={"doc":"libm in pure Rust","items":[[5,"acos","libm","",N,[[["f64"]],["f64"]]],[5,"acosf","","",N,[[["f32"]],["f32"]]],[5,"asin","","",N,[[["f64"]],["f64"]]],[5,"asinf","","",N,[[["f32"]],["f32"]]],[5,"atan","","",N,[[["f64"]],["f64"]]],[5,"atan2","","",N,[[["f64"],["f64"]],["f64"]]],[5,"atan2f","","",N,[[["f32"],["f32"]],["f32"]]],[5,"atanf","","",N,[[["f32"]],["f32"]]],[5,"cbrt","","",N,[[["f64"]],["f64"]]],[5,"cbrtf","","",N,[[["f32"]],["f32"]]],[5,"ceil","","",N,[[["f64"]],["f64"]]],[5,"ceilf","","",N,[[["f32"]],["f32"]]],[5,"cos","","",N,[[["f64"]],["f64"]]],[5,"cosf","","",N,[[["f32"]],["f32"]]],[5,"cosh","","",N,[[["f64"]],["f64"]]],[5,"coshf","","",N,[[["f32"]],["f32"]]],[5,"exp","","",N,[[["f64"]],["f64"]]],[5,"exp2","","",N,[[["f64"]],["f64"]]],[5,"exp2f","","",N,[[["f32"]],["f32"]]],[5,"expf","","",N,[[["f32"]],["f32"]]],[5,"expm1","","",N,[[["f64"]],["f64"]]],[5,"expm1f","","",N,[[["f32"]],["f32"]]],[5,"fabs","","",N,[[["f64"]],["f64"]]],[5,"fabsf","","",N,[[["f32"]],["f32"]]],[5,"fdim","","",N,[[["f64"],["f64"]],["f64"]]],[5,"fdimf","","",N,[[["f32"],["f32"]],["f32"]]],[5,"floor","","",N,[[["f64"]],["f64"]]],[5,"floorf","","",N,[[["f32"]],["f32"]]],[5,"fma","","",N,[[["f64"],["f64"],["f64"]],["f64"]]],[5,"fmaf","","",N,[[["f32"],["f32"],["f32"]],["f32"]]],[5,"fmod","","",N,[[["f64"],["f64"]],["f64"]]],[5,"fmodf","","",N,[[["f32"],["f32"]],["f32"]]],[5,"hypot","","",N,[[["f64"],["f64"]],["f64"]]],[5,"hypotf","","",N,[[["f32"],["f32"]],["f32"]]],[5,"log","","",N,[[["f64"]],["f64"]]],[5,"log10","","",N,[[["f64"]],["f64"]]],[5,"log10f","","",N,[[["f32"]],["f32"]]],[5,"log1p","","",N,[[["f64"]],["f64"]]],[5,"log1pf","","",N,[[["f32"]],["f32"]]],[5,"log2","","",N,[[["f64"]],["f64"]]],[5,"log2f","","",N,[[["f32"]],["f32"]]],[5,"logf","","",N,[[["f32"]],["f32"]]],[5,"pow","","",N,[[["f64"],["f64"]],["f64"]]],[5,"powf","","",N,[[["f32"],["f32"]],["f32"]]],[5,"round","","",N,[[["f64"]],["f64"]]],[5,"roundf","","",N,[[["f32"]],["f32"]]],[5,"scalbn","","",N,[[["f64"],["i32"]],["f64"]]],[5,"scalbnf","","",N,[[["f32"],["i32"]],["f32"]]],[5,"sin","","",N,[[["f64"]],["f64"]]],[5,"sinf","","",N,[[["f32"]],["f32"]]],[5,"sinh","","",N,[[["f64"]],["f64"]]],[5,"sinhf","","",N,[[["f32"]],["f32"]]],[5,"sqrt","","",N,[[["f64"]],["f64"]]],[5,"sqrtf","","",N,[[["f32"]],["f32"]]],[5,"tan","","",N,[[["f64"]],["f64"]]],[5,"tanf","","",N,[[["f32"]],["f32"]]],[5,"tanh","","",N,[[["f64"]],["f64"]]],[5,"tanhf","","",N,[[["f32"]],["f32"]]],[5,"trunc","","",N,[[["f64"]],["f64"]]],[5,"truncf","","",N,[[["f32"]],["f32"]]],[8,"F32Ext","","Math support for `f32`",N,N],[10,"floor","","",0,[[["self"]],["self"]]],[10,"ceil","","",0,[[["self"]],["self"]]],[10,"round","","",0,[[["self"]],["self"]]],[10,"trunc","","",0,[[["self"]],["self"]]],[10,"fdim","","",0,[[["self"],["self"]],["self"]]],[10,"fract","","",0,[[["self"]],["self"]]],[10,"abs","","",0,[[["self"]],["self"]]],[10,"mul_add","","",0,[[["self"],["self"],["self"]],["self"]]],[10,"div_euc","","",0,[[["self"],["self"]],["self"]]],[10,"mod_euc","","",0,[[["self"],["self"]],["self"]]],[10,"powf","","",0,[[["self"],["self"]],["self"]]],[10,"sqrt","","",0,[[["self"]],["self"]]],[10,"exp","","",0,[[["self"]],["self"]]],[10,"exp2","","",0,[[["self"]],["self"]]],[10,"ln","","",0,[[["self"]],["self"]]],[10,"log","","",0,[[["self"],["self"]],["self"]]],[10,"log2","","",0,[[["self"]],["self"]]],[10,"log10","","",0,[[["self"]],["self"]]],[10,"cbrt","","",0,[[["self"]],["self"]]],[10,"hypot","","",0,[[["self"],["self"]],["self"]]],[10,"sin","","",0,[[["self"]],["self"]]],[10,"cos","","",0,[[["self"]],["self"]]],[10,"tan","","",0,[[["self"]],["self"]]],[10,"asin","","",0,[[["self"]],["self"]]],[10,"acos","","",0,[[["self"]],["self"]]],[10,"atan","","",0,[[["self"]],["self"]]],[10,"atan2","","",0,[[["self"],["self"]],["self"]]],[11,"sin_cos","","",0,N],[10,"exp_m1","","",0,[[["self"]],["self"]]],[10,"ln_1p","","",0,[[["self"]],["self"]]],[10,"sinh","","",0,[[["self"]],["self"]]],[10,"cosh","","",0,[[["self"]],["self"]]],[10,"tanh","","",0,[[["self"]],["self"]]],[10,"asinh","","",0,[[["self"]],["self"]]],[10,"acosh","","",0,[[["self"]],["self"]]],[10,"atanh","","",0,[[["self"]],["self"]]],[8,"F64Ext","","Math support for `f64`",N,N],[10,"floor","","",1,[[["self"]],["self"]]],[10,"ceil","","",1,[[["self"]],["self"]]],[10,"round","","",1,[[["self"]],["self"]]],[10,"trunc","","",1,[[["self"]],["self"]]],[10,"fdim","","",1,[[["self"],["self"]],["self"]]],[10,"fract","","",1,[[["self"]],["self"]]],[10,"abs","","",1,[[["self"]],["self"]]],[10,"mul_add","","",1,[[["self"],["self"],["self"]],["self"]]],[10,"div_euc","","",1,[[["self"],["self"]],["self"]]],[10,"mod_euc","","",1,[[["self"],["self"]],["self"]]],[10,"powf","","",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","",1,[[["self"]],["self"]]],[10,"exp","","",1,[[["self"]],["self"]]],[10,"exp2","","",1,[[["self"]],["self"]]],[10,"ln","","",1,[[["self"]],["self"]]],[10,"log","","",1,[[["self"],["self"]],["self"]]],[10,"log2","","",1,[[["self"]],["self"]]],[10,"log10","","",1,[[["self"]],["self"]]],[10,"cbrt","","",1,[[["self"]],["self"]]],[10,"hypot","","",1,[[["self"],["self"]],["self"]]],[10,"sin","","",1,[[["self"]],["self"]]],[10,"cos","","",1,[[["self"]],["self"]]],[10,"tan","","",1,[[["self"]],["self"]]],[10,"asin","","",1,[[["self"]],["self"]]],[10,"acos","","",1,[[["self"]],["self"]]],[10,"atan","","",1,[[["self"]],["self"]]],[10,"atan2","","",1,[[["self"],["self"]],["self"]]],[11,"sin_cos","","",1,N],[10,"exp_m1","","",1,[[["self"]],["self"]]],[10,"ln_1p","","",1,[[["self"]],["self"]]],[10,"sinh","","",1,[[["self"]],["self"]]],[10,"cosh","","",1,[[["self"]],["self"]]],[10,"tanh","","",1,[[["self"]],["self"]]],[10,"asinh","","",1,[[["self"]],["self"]]],[10,"acosh","","",1,[[["self"]],["self"]]],[10,"atanh","","",1,[[["self"]],["self"]]]],"paths":[[8,"F32Ext"],[8,"F64Ext"]]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
initSearch(searchIndex);
